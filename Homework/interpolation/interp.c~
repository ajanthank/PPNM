#include <math.h>
#include <stdio.h>
#include <assert.h>

int binsearch(int n, double* x, double z){/* locates the interval for z by bisection */ 
	assert(n>1 && x[0]<=z && z<=x[n-1]);
	int i=0, j=n-1;
	while(j-i>1){
		int mid=(i+j)/2;
		if(z>x[mid]) i=mid; else j=mid;
		}
	return i;
}

double linterp(int n, double x[], double y[], double z){
  int index=binsearch(n,x,z);
  assert(x[index+1]>x[index]);
  double Delta_x=x[index+1]-x[index];
  double Delta_y=y[index+1]-y[index];
  double p=Delta_y/Delta_x;
  double lin_z=y[index]+p*(z-x[index]);
  
  return lin_z;
}

//double linterp_integ(int n, double x[], double y[], double z){
//  int index=binsearch(n,x,z);
//  double integral = 0;
//  for(int i=0; i<index; i++){
//    integral += (x[i+1]-x[i])*y[i]+0.5*(x[i+1]-x[i])*(y[i+1]-y[i]);
//    integral += (z-x[index])*y[index]+0.5*(z-x[index])*(linterp(n,x,y,z)-y[index]);
//    return integral;
//  }
  
//}
double linterp_integ(int n, double x[],double y[],double z){

int i = binsearch(n,x,z);

double output=0;
int p=1;
while(p<=i){
	output+=y[p-1]*(x[p]-x[p-1])+0.5*(y[p]-y[p-1])*(x[p]-x[p-1]); //calculating area between the points x[p-1] and x[p], first the rectangle under tyh line and then the triangle on top
	p++;
}


double yinput=linterp(n,x,y,z);

output+=y[i]*(z-x[i])+0.5*(yinput-y[i])*(z-x[i]);

return output;
}
